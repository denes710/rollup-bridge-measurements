"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deployConfigSpec = void 0;
const ethers_1 = require("ethers");
exports.deployConfigSpec = {
    numDeployConfirmations: {
        type: 'number',
        default: 1,
    },
    finalSystemOwner: {
        type: 'address',
    },
    controller: {
        type: 'address',
    },
    l1StartingBlockTag: {
        type: 'string',
    },
    l1ChainID: {
        type: 'number',
    },
    l2ChainID: {
        type: 'number',
    },
    l2BlockTime: {
        type: 'number',
    },
    maxSequencerDrift: {
        type: 'number',
    },
    sequencerWindowSize: {
        type: 'number',
    },
    channelTimeout: {
        type: 'number',
    },
    p2pSequencerAddress: {
        type: 'address',
    },
    batchInboxAddress: {
        type: 'address',
    },
    batchSenderAddress: {
        type: 'address',
    },
    l2OutputOracleSubmissionInterval: {
        type: 'number',
    },
    l2OutputOracleStartingBlockNumber: {
        type: 'number',
        default: 0,
    },
    l2OutputOracleStartingTimestamp: {
        type: 'number',
    },
    l2OutputOracleProposer: {
        type: 'address',
    },
    l2OutputOracleChallenger: {
        type: 'address',
    },
    finalizationPeriodSeconds: {
        type: 'number',
        default: 2,
    },
    cliqueSignerAddress: {
        type: 'address',
        default: ethers_1.ethers.constants.AddressZero,
    },
    l1BlockTime: {
        type: 'number',
        default: 15,
    },
    l1GenesisBlockNonce: {
        type: 'string',
        default: '0x0',
    },
    l1GenesisBlockGasLimit: {
        type: 'string',
        default: ethers_1.ethers.BigNumber.from(15000000).toHexString(),
    },
    l1GenesisBlockDifficulty: {
        type: 'string',
        default: '0x1',
    },
    l1GenesisBlockMixHash: {
        type: 'string',
        default: ethers_1.ethers.constants.HashZero,
    },
    l1GenesisBlockCoinbase: {
        type: 'address',
        default: ethers_1.ethers.constants.AddressZero,
    },
    l1GenesisBlockNumber: {
        type: 'string',
        default: '0x0',
    },
    l1GenesisBlockGasUsed: {
        type: 'string',
        default: '0x0',
    },
    l1GenesisBlockParentHash: {
        type: 'string',
        default: ethers_1.ethers.constants.HashZero,
    },
    l1GenesisBlockBaseFeePerGas: {
        type: 'string',
        default: ethers_1.ethers.BigNumber.from(1000000000).toHexString(),
    },
    l2GenesisBlockNonce: {
        type: 'string',
        default: '0x0',
    },
    l2GenesisBlockGasLimit: {
        type: 'string',
        default: ethers_1.ethers.BigNumber.from(15000000).toHexString(),
    },
    l2GenesisBlockDifficulty: {
        type: 'string',
        default: '0x1',
    },
    l2GenesisBlockMixHash: {
        type: 'string',
        default: ethers_1.ethers.constants.HashZero,
    },
    l2GenesisBlockNumber: {
        type: 'string',
        default: '0x0',
    },
    l2GenesisBlockGasUsed: {
        type: 'string',
        default: '0x0',
    },
    l2GenesisBlockParentHash: {
        type: 'string',
        default: ethers_1.ethers.constants.HashZero,
    },
    l2GenesisBlockBaseFeePerGas: {
        type: 'string',
        default: ethers_1.ethers.BigNumber.from(1000000000).toHexString(),
    },
    gasPriceOracleOverhead: {
        type: 'number',
        default: 2100,
    },
    gasPriceOracleScalar: {
        type: 'number',
        default: 1000000,
    },
    governanceTokenSymbol: {
        type: 'string',
        default: 'OP',
    },
    governanceTokenName: {
        type: 'string',
        default: 'Optimism',
    },
    governanceTokenOwner: {
        type: 'string',
    },
};
//# sourceMappingURL=deploy-config.js.map