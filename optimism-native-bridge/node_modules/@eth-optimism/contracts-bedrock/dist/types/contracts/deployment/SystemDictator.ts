/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace SystemDictator {
  export type GlobalConfigStruct = {
    addressManager: PromiseOrValue<string>;
    proxyAdmin: PromiseOrValue<string>;
    controller: PromiseOrValue<string>;
    finalOwner: PromiseOrValue<string>;
  };

  export type GlobalConfigStructOutput = [string, string, string, string] & {
    addressManager: string;
    proxyAdmin: string;
    controller: string;
    finalOwner: string;
  };

  export type ProxyAddressConfigStruct = {
    l2OutputOracleProxy: PromiseOrValue<string>;
    optimismPortalProxy: PromiseOrValue<string>;
    l1CrossDomainMessengerProxy: PromiseOrValue<string>;
    l1StandardBridgeProxy: PromiseOrValue<string>;
    optimismMintableERC20FactoryProxy: PromiseOrValue<string>;
    l1ERC721BridgeProxy: PromiseOrValue<string>;
    systemConfigProxy: PromiseOrValue<string>;
  };

  export type ProxyAddressConfigStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string
  ] & {
    l2OutputOracleProxy: string;
    optimismPortalProxy: string;
    l1CrossDomainMessengerProxy: string;
    l1StandardBridgeProxy: string;
    optimismMintableERC20FactoryProxy: string;
    l1ERC721BridgeProxy: string;
    systemConfigProxy: string;
  };

  export type ImplementationAddressConfigStruct = {
    l2OutputOracleImpl: PromiseOrValue<string>;
    optimismPortalImpl: PromiseOrValue<string>;
    l1CrossDomainMessengerImpl: PromiseOrValue<string>;
    l1StandardBridgeImpl: PromiseOrValue<string>;
    optimismMintableERC20FactoryImpl: PromiseOrValue<string>;
    l1ERC721BridgeImpl: PromiseOrValue<string>;
    portalSenderImpl: PromiseOrValue<string>;
    systemConfigImpl: PromiseOrValue<string>;
  };

  export type ImplementationAddressConfigStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string
  ] & {
    l2OutputOracleImpl: string;
    optimismPortalImpl: string;
    l1CrossDomainMessengerImpl: string;
    l1StandardBridgeImpl: string;
    optimismMintableERC20FactoryImpl: string;
    l1ERC721BridgeImpl: string;
    portalSenderImpl: string;
    systemConfigImpl: string;
  };

  export type SystemConfigConfigStruct = {
    owner: PromiseOrValue<string>;
    overhead: PromiseOrValue<BigNumberish>;
    scalar: PromiseOrValue<BigNumberish>;
    batcherHash: PromiseOrValue<BytesLike>;
    gasLimit: PromiseOrValue<BigNumberish>;
    unsafeBlockSigner: PromiseOrValue<string>;
  };

  export type SystemConfigConfigStructOutput = [
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string
  ] & {
    owner: string;
    overhead: BigNumber;
    scalar: BigNumber;
    batcherHash: string;
    gasLimit: BigNumber;
    unsafeBlockSigner: string;
  };

  export type DeployConfigStruct = {
    globalConfig: SystemDictator.GlobalConfigStruct;
    proxyAddressConfig: SystemDictator.ProxyAddressConfigStruct;
    implementationAddressConfig: SystemDictator.ImplementationAddressConfigStruct;
    systemConfigConfig: SystemDictator.SystemConfigConfigStruct;
  };

  export type DeployConfigStructOutput = [
    SystemDictator.GlobalConfigStructOutput,
    SystemDictator.ProxyAddressConfigStructOutput,
    SystemDictator.ImplementationAddressConfigStructOutput,
    SystemDictator.SystemConfigConfigStructOutput
  ] & {
    globalConfig: SystemDictator.GlobalConfigStructOutput;
    proxyAddressConfig: SystemDictator.ProxyAddressConfigStructOutput;
    implementationAddressConfig: SystemDictator.ImplementationAddressConfigStructOutput;
    systemConfigConfig: SystemDictator.SystemConfigConfigStructOutput;
  };

  export type L2OutputOracleDynamicConfigStruct = {
    l2OutputOracleStartingBlockNumber: PromiseOrValue<BigNumberish>;
    l2OutputOracleStartingTimestamp: PromiseOrValue<BigNumberish>;
  };

  export type L2OutputOracleDynamicConfigStructOutput = [
    BigNumber,
    BigNumber
  ] & {
    l2OutputOracleStartingBlockNumber: BigNumber;
    l2OutputOracleStartingTimestamp: BigNumber;
  };
}

export interface SystemDictatorInterface extends utils.Interface {
  functions: {
    "EXIT_1_NO_RETURN_STEP()": FunctionFragment;
    "PROXY_TRANSFER_STEP()": FunctionFragment;
    "config()": FunctionFragment;
    "currentStep()": FunctionFragment;
    "dynamicConfigSet()": FunctionFragment;
    "exit1()": FunctionFragment;
    "exited()": FunctionFragment;
    "finalize()": FunctionFragment;
    "finalized()": FunctionFragment;
    "initialize(((address,address,address,address),(address,address,address,address,address,address,address),(address,address,address,address,address,address,address,address),(address,uint256,uint256,bytes32,uint64,address)))": FunctionFragment;
    "l2OutputOracleDynamicConfig()": FunctionFragment;
    "oldL1CrossDomainMessenger()": FunctionFragment;
    "optimismPortalDynamicConfig()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "step1()": FunctionFragment;
    "step2()": FunctionFragment;
    "step3()": FunctionFragment;
    "step4()": FunctionFragment;
    "step5()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateDynamicConfig((uint256,uint256),bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "EXIT_1_NO_RETURN_STEP"
      | "PROXY_TRANSFER_STEP"
      | "config"
      | "currentStep"
      | "dynamicConfigSet"
      | "exit1"
      | "exited"
      | "finalize"
      | "finalized"
      | "initialize"
      | "l2OutputOracleDynamicConfig"
      | "oldL1CrossDomainMessenger"
      | "optimismPortalDynamicConfig"
      | "owner"
      | "renounceOwnership"
      | "step1"
      | "step2"
      | "step3"
      | "step4"
      | "step5"
      | "transferOwnership"
      | "updateDynamicConfig"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "EXIT_1_NO_RETURN_STEP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROXY_TRANSFER_STEP",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "config", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "currentStep",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dynamicConfigSet",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "exit1", values?: undefined): string;
  encodeFunctionData(functionFragment: "exited", values?: undefined): string;
  encodeFunctionData(functionFragment: "finalize", values?: undefined): string;
  encodeFunctionData(functionFragment: "finalized", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [SystemDictator.DeployConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "l2OutputOracleDynamicConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oldL1CrossDomainMessenger",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optimismPortalDynamicConfig",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "step1", values?: undefined): string;
  encodeFunctionData(functionFragment: "step2", values?: undefined): string;
  encodeFunctionData(functionFragment: "step3", values?: undefined): string;
  encodeFunctionData(functionFragment: "step4", values?: undefined): string;
  encodeFunctionData(functionFragment: "step5", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDynamicConfig",
    values: [
      SystemDictator.L2OutputOracleDynamicConfigStruct,
      PromiseOrValue<boolean>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "EXIT_1_NO_RETURN_STEP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROXY_TRANSFER_STEP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentStep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dynamicConfigSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exit1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exited", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finalized", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "l2OutputOracleDynamicConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oldL1CrossDomainMessenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optimismPortalDynamicConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "step1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "step2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "step3", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "step4", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "step5", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDynamicConfig",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SystemDictator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SystemDictatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    EXIT_1_NO_RETURN_STEP(overrides?: CallOverrides): Promise<[number]>;

    PROXY_TRANSFER_STEP(overrides?: CallOverrides): Promise<[number]>;

    config(
      overrides?: CallOverrides
    ): Promise<
      [
        SystemDictator.GlobalConfigStructOutput,
        SystemDictator.ProxyAddressConfigStructOutput,
        SystemDictator.ImplementationAddressConfigStructOutput,
        SystemDictator.SystemConfigConfigStructOutput
      ] & {
        globalConfig: SystemDictator.GlobalConfigStructOutput;
        proxyAddressConfig: SystemDictator.ProxyAddressConfigStructOutput;
        implementationAddressConfig: SystemDictator.ImplementationAddressConfigStructOutput;
        systemConfigConfig: SystemDictator.SystemConfigConfigStructOutput;
      }
    >;

    currentStep(overrides?: CallOverrides): Promise<[number]>;

    dynamicConfigSet(overrides?: CallOverrides): Promise<[boolean]>;

    exit1(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exited(overrides?: CallOverrides): Promise<[boolean]>;

    finalize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    finalized(overrides?: CallOverrides): Promise<[boolean]>;

    initialize(
      _config: SystemDictator.DeployConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    l2OutputOracleDynamicConfig(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        l2OutputOracleStartingBlockNumber: BigNumber;
        l2OutputOracleStartingTimestamp: BigNumber;
      }
    >;

    oldL1CrossDomainMessenger(overrides?: CallOverrides): Promise<[string]>;

    optimismPortalDynamicConfig(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    step1(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    step2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    step3(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    step4(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    step5(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateDynamicConfig(
      _l2OutputOracleDynamicConfig: SystemDictator.L2OutputOracleDynamicConfigStruct,
      _optimismPortalDynamicConfig: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  EXIT_1_NO_RETURN_STEP(overrides?: CallOverrides): Promise<number>;

  PROXY_TRANSFER_STEP(overrides?: CallOverrides): Promise<number>;

  config(
    overrides?: CallOverrides
  ): Promise<
    [
      SystemDictator.GlobalConfigStructOutput,
      SystemDictator.ProxyAddressConfigStructOutput,
      SystemDictator.ImplementationAddressConfigStructOutput,
      SystemDictator.SystemConfigConfigStructOutput
    ] & {
      globalConfig: SystemDictator.GlobalConfigStructOutput;
      proxyAddressConfig: SystemDictator.ProxyAddressConfigStructOutput;
      implementationAddressConfig: SystemDictator.ImplementationAddressConfigStructOutput;
      systemConfigConfig: SystemDictator.SystemConfigConfigStructOutput;
    }
  >;

  currentStep(overrides?: CallOverrides): Promise<number>;

  dynamicConfigSet(overrides?: CallOverrides): Promise<boolean>;

  exit1(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exited(overrides?: CallOverrides): Promise<boolean>;

  finalize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  finalized(overrides?: CallOverrides): Promise<boolean>;

  initialize(
    _config: SystemDictator.DeployConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  l2OutputOracleDynamicConfig(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      l2OutputOracleStartingBlockNumber: BigNumber;
      l2OutputOracleStartingTimestamp: BigNumber;
    }
  >;

  oldL1CrossDomainMessenger(overrides?: CallOverrides): Promise<string>;

  optimismPortalDynamicConfig(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  step1(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  step2(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  step3(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  step4(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  step5(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateDynamicConfig(
    _l2OutputOracleDynamicConfig: SystemDictator.L2OutputOracleDynamicConfigStruct,
    _optimismPortalDynamicConfig: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    EXIT_1_NO_RETURN_STEP(overrides?: CallOverrides): Promise<number>;

    PROXY_TRANSFER_STEP(overrides?: CallOverrides): Promise<number>;

    config(
      overrides?: CallOverrides
    ): Promise<
      [
        SystemDictator.GlobalConfigStructOutput,
        SystemDictator.ProxyAddressConfigStructOutput,
        SystemDictator.ImplementationAddressConfigStructOutput,
        SystemDictator.SystemConfigConfigStructOutput
      ] & {
        globalConfig: SystemDictator.GlobalConfigStructOutput;
        proxyAddressConfig: SystemDictator.ProxyAddressConfigStructOutput;
        implementationAddressConfig: SystemDictator.ImplementationAddressConfigStructOutput;
        systemConfigConfig: SystemDictator.SystemConfigConfigStructOutput;
      }
    >;

    currentStep(overrides?: CallOverrides): Promise<number>;

    dynamicConfigSet(overrides?: CallOverrides): Promise<boolean>;

    exit1(overrides?: CallOverrides): Promise<void>;

    exited(overrides?: CallOverrides): Promise<boolean>;

    finalize(overrides?: CallOverrides): Promise<void>;

    finalized(overrides?: CallOverrides): Promise<boolean>;

    initialize(
      _config: SystemDictator.DeployConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    l2OutputOracleDynamicConfig(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        l2OutputOracleStartingBlockNumber: BigNumber;
        l2OutputOracleStartingTimestamp: BigNumber;
      }
    >;

    oldL1CrossDomainMessenger(overrides?: CallOverrides): Promise<string>;

    optimismPortalDynamicConfig(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    step1(overrides?: CallOverrides): Promise<void>;

    step2(overrides?: CallOverrides): Promise<void>;

    step3(overrides?: CallOverrides): Promise<void>;

    step4(overrides?: CallOverrides): Promise<void>;

    step5(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDynamicConfig(
      _l2OutputOracleDynamicConfig: SystemDictator.L2OutputOracleDynamicConfigStruct,
      _optimismPortalDynamicConfig: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    EXIT_1_NO_RETURN_STEP(overrides?: CallOverrides): Promise<BigNumber>;

    PROXY_TRANSFER_STEP(overrides?: CallOverrides): Promise<BigNumber>;

    config(overrides?: CallOverrides): Promise<BigNumber>;

    currentStep(overrides?: CallOverrides): Promise<BigNumber>;

    dynamicConfigSet(overrides?: CallOverrides): Promise<BigNumber>;

    exit1(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exited(overrides?: CallOverrides): Promise<BigNumber>;

    finalize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    finalized(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _config: SystemDictator.DeployConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    l2OutputOracleDynamicConfig(overrides?: CallOverrides): Promise<BigNumber>;

    oldL1CrossDomainMessenger(overrides?: CallOverrides): Promise<BigNumber>;

    optimismPortalDynamicConfig(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    step1(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    step2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    step3(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    step4(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    step5(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateDynamicConfig(
      _l2OutputOracleDynamicConfig: SystemDictator.L2OutputOracleDynamicConfigStruct,
      _optimismPortalDynamicConfig: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EXIT_1_NO_RETURN_STEP(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PROXY_TRANSFER_STEP(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    config(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentStep(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dynamicConfigSet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exit1(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exited(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    finalized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _config: SystemDictator.DeployConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    l2OutputOracleDynamicConfig(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oldL1CrossDomainMessenger(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    optimismPortalDynamicConfig(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    step1(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    step2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    step3(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    step4(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    step5(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateDynamicConfig(
      _l2OutputOracleDynamicConfig: SystemDictator.L2OutputOracleDynamicConfigStruct,
      _optimismPortalDynamicConfig: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
