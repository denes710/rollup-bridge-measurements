/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace Types {
  export type OutputProposalStruct = {
    outputRoot: PromiseOrValue<BytesLike>;
    timestamp: PromiseOrValue<BigNumberish>;
    l2BlockNumber: PromiseOrValue<BigNumberish>;
  };

  export type OutputProposalStructOutput = [string, BigNumber, BigNumber] & {
    outputRoot: string;
    timestamp: BigNumber;
    l2BlockNumber: BigNumber;
  };
}

export interface L2OutputOracleInterface extends utils.Interface {
  functions: {
    "CHALLENGER()": FunctionFragment;
    "FINALIZATION_PERIOD_SECONDS()": FunctionFragment;
    "L2_BLOCK_TIME()": FunctionFragment;
    "PROPOSER()": FunctionFragment;
    "SUBMISSION_INTERVAL()": FunctionFragment;
    "computeL2Timestamp(uint256)": FunctionFragment;
    "deleteL2Outputs(uint256)": FunctionFragment;
    "getL2Output(uint256)": FunctionFragment;
    "getL2OutputAfter(uint256)": FunctionFragment;
    "getL2OutputIndexAfter(uint256)": FunctionFragment;
    "initialize(uint256,uint256)": FunctionFragment;
    "latestBlockNumber()": FunctionFragment;
    "latestOutputIndex()": FunctionFragment;
    "nextBlockNumber()": FunctionFragment;
    "nextOutputIndex()": FunctionFragment;
    "proposeL2Output(bytes32,uint256,bytes32,uint256)": FunctionFragment;
    "startingBlockNumber()": FunctionFragment;
    "startingTimestamp()": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CHALLENGER"
      | "FINALIZATION_PERIOD_SECONDS"
      | "L2_BLOCK_TIME"
      | "PROPOSER"
      | "SUBMISSION_INTERVAL"
      | "computeL2Timestamp"
      | "deleteL2Outputs"
      | "getL2Output"
      | "getL2OutputAfter"
      | "getL2OutputIndexAfter"
      | "initialize"
      | "latestBlockNumber"
      | "latestOutputIndex"
      | "nextBlockNumber"
      | "nextOutputIndex"
      | "proposeL2Output"
      | "startingBlockNumber"
      | "startingTimestamp"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CHALLENGER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FINALIZATION_PERIOD_SECONDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "L2_BLOCK_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PROPOSER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SUBMISSION_INTERVAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computeL2Timestamp",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteL2Outputs",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getL2Output",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getL2OutputAfter",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getL2OutputIndexAfter",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "latestBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestOutputIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextOutputIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposeL2Output",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "startingBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startingTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "CHALLENGER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "FINALIZATION_PERIOD_SECONDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "L2_BLOCK_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PROPOSER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SUBMISSION_INTERVAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeL2Timestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteL2Outputs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getL2Output",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getL2OutputAfter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getL2OutputIndexAfter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestOutputIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextOutputIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeL2Output",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startingBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startingTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "OutputProposed(bytes32,uint256,uint256,uint256)": EventFragment;
    "OutputsDeleted(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OutputProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OutputsDeleted"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OutputProposedEventObject {
  outputRoot: string;
  l2OutputIndex: BigNumber;
  l2BlockNumber: BigNumber;
  l1Timestamp: BigNumber;
}
export type OutputProposedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  OutputProposedEventObject
>;

export type OutputProposedEventFilter = TypedEventFilter<OutputProposedEvent>;

export interface OutputsDeletedEventObject {
  prevNextOutputIndex: BigNumber;
  newNextOutputIndex: BigNumber;
}
export type OutputsDeletedEvent = TypedEvent<
  [BigNumber, BigNumber],
  OutputsDeletedEventObject
>;

export type OutputsDeletedEventFilter = TypedEventFilter<OutputsDeletedEvent>;

export interface L2OutputOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: L2OutputOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CHALLENGER(overrides?: CallOverrides): Promise<[string]>;

    FINALIZATION_PERIOD_SECONDS(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    L2_BLOCK_TIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    PROPOSER(overrides?: CallOverrides): Promise<[string]>;

    SUBMISSION_INTERVAL(overrides?: CallOverrides): Promise<[BigNumber]>;

    computeL2Timestamp(
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deleteL2Outputs(
      _l2OutputIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getL2Output(
      _l2OutputIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Types.OutputProposalStructOutput]>;

    getL2OutputAfter(
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Types.OutputProposalStructOutput]>;

    getL2OutputIndexAfter(
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _startingBlockNumber: PromiseOrValue<BigNumberish>,
      _startingTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    latestBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    latestOutputIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextOutputIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposeL2Output(
      _outputRoot: PromiseOrValue<BytesLike>,
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      _l1BlockHash: PromiseOrValue<BytesLike>,
      _l1BlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startingBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    startingTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    version(overrides?: CallOverrides): Promise<[string]>;
  };

  CHALLENGER(overrides?: CallOverrides): Promise<string>;

  FINALIZATION_PERIOD_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

  L2_BLOCK_TIME(overrides?: CallOverrides): Promise<BigNumber>;

  PROPOSER(overrides?: CallOverrides): Promise<string>;

  SUBMISSION_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

  computeL2Timestamp(
    _l2BlockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deleteL2Outputs(
    _l2OutputIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getL2Output(
    _l2OutputIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Types.OutputProposalStructOutput>;

  getL2OutputAfter(
    _l2BlockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Types.OutputProposalStructOutput>;

  getL2OutputIndexAfter(
    _l2BlockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _startingBlockNumber: PromiseOrValue<BigNumberish>,
    _startingTimestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  latestBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  latestOutputIndex(overrides?: CallOverrides): Promise<BigNumber>;

  nextBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  nextOutputIndex(overrides?: CallOverrides): Promise<BigNumber>;

  proposeL2Output(
    _outputRoot: PromiseOrValue<BytesLike>,
    _l2BlockNumber: PromiseOrValue<BigNumberish>,
    _l1BlockHash: PromiseOrValue<BytesLike>,
    _l1BlockNumber: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startingBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  startingTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    CHALLENGER(overrides?: CallOverrides): Promise<string>;

    FINALIZATION_PERIOD_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

    L2_BLOCK_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    PROPOSER(overrides?: CallOverrides): Promise<string>;

    SUBMISSION_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    computeL2Timestamp(
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deleteL2Outputs(
      _l2OutputIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getL2Output(
      _l2OutputIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Types.OutputProposalStructOutput>;

    getL2OutputAfter(
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Types.OutputProposalStructOutput>;

    getL2OutputIndexAfter(
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _startingBlockNumber: PromiseOrValue<BigNumberish>,
      _startingTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    latestBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    latestOutputIndex(overrides?: CallOverrides): Promise<BigNumber>;

    nextBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    nextOutputIndex(overrides?: CallOverrides): Promise<BigNumber>;

    proposeL2Output(
      _outputRoot: PromiseOrValue<BytesLike>,
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      _l1BlockHash: PromiseOrValue<BytesLike>,
      _l1BlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    startingBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    startingTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OutputProposed(bytes32,uint256,uint256,uint256)"(
      outputRoot?: PromiseOrValue<BytesLike> | null,
      l2OutputIndex?: PromiseOrValue<BigNumberish> | null,
      l2BlockNumber?: PromiseOrValue<BigNumberish> | null,
      l1Timestamp?: null
    ): OutputProposedEventFilter;
    OutputProposed(
      outputRoot?: PromiseOrValue<BytesLike> | null,
      l2OutputIndex?: PromiseOrValue<BigNumberish> | null,
      l2BlockNumber?: PromiseOrValue<BigNumberish> | null,
      l1Timestamp?: null
    ): OutputProposedEventFilter;

    "OutputsDeleted(uint256,uint256)"(
      prevNextOutputIndex?: PromiseOrValue<BigNumberish> | null,
      newNextOutputIndex?: PromiseOrValue<BigNumberish> | null
    ): OutputsDeletedEventFilter;
    OutputsDeleted(
      prevNextOutputIndex?: PromiseOrValue<BigNumberish> | null,
      newNextOutputIndex?: PromiseOrValue<BigNumberish> | null
    ): OutputsDeletedEventFilter;
  };

  estimateGas: {
    CHALLENGER(overrides?: CallOverrides): Promise<BigNumber>;

    FINALIZATION_PERIOD_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

    L2_BLOCK_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    PROPOSER(overrides?: CallOverrides): Promise<BigNumber>;

    SUBMISSION_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    computeL2Timestamp(
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deleteL2Outputs(
      _l2OutputIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getL2Output(
      _l2OutputIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getL2OutputAfter(
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getL2OutputIndexAfter(
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _startingBlockNumber: PromiseOrValue<BigNumberish>,
      _startingTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    latestBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    latestOutputIndex(overrides?: CallOverrides): Promise<BigNumber>;

    nextBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    nextOutputIndex(overrides?: CallOverrides): Promise<BigNumber>;

    proposeL2Output(
      _outputRoot: PromiseOrValue<BytesLike>,
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      _l1BlockHash: PromiseOrValue<BytesLike>,
      _l1BlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startingBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    startingTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    CHALLENGER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FINALIZATION_PERIOD_SECONDS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    L2_BLOCK_TIME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PROPOSER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SUBMISSION_INTERVAL(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeL2Timestamp(
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deleteL2Outputs(
      _l2OutputIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getL2Output(
      _l2OutputIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getL2OutputAfter(
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getL2OutputIndexAfter(
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _startingBlockNumber: PromiseOrValue<BigNumberish>,
      _startingTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    latestBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestOutputIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextOutputIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposeL2Output(
      _outputRoot: PromiseOrValue<BytesLike>,
      _l2BlockNumber: PromiseOrValue<BigNumberish>,
      _l1BlockHash: PromiseOrValue<BytesLike>,
      _l1BlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startingBlockNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startingTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
