/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface EchidnaFuzzHashingInterface extends utils.Interface {
  functions: {
    "echidna_hash_xdomain_msg_0()": FunctionFragment;
    "echidna_hash_xdomain_msg_1()": FunctionFragment;
    "echidna_hash_xdomain_msg_high_version()": FunctionFragment;
    "testHashCrossDomainMessageHighVersion(uint16,uint240,address,address,uint256,uint256,bytes)": FunctionFragment;
    "testHashCrossDomainMessageV0(uint240,address,address,uint256,uint256,bytes)": FunctionFragment;
    "testHashCrossDomainMessageV1(uint240,address,address,uint256,uint256,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "echidna_hash_xdomain_msg_0"
      | "echidna_hash_xdomain_msg_1"
      | "echidna_hash_xdomain_msg_high_version"
      | "testHashCrossDomainMessageHighVersion"
      | "testHashCrossDomainMessageV0"
      | "testHashCrossDomainMessageV1"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "echidna_hash_xdomain_msg_0",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "echidna_hash_xdomain_msg_1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "echidna_hash_xdomain_msg_high_version",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testHashCrossDomainMessageHighVersion",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testHashCrossDomainMessageV0",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testHashCrossDomainMessageV1",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "echidna_hash_xdomain_msg_0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "echidna_hash_xdomain_msg_1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "echidna_hash_xdomain_msg_high_version",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testHashCrossDomainMessageHighVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testHashCrossDomainMessageV0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testHashCrossDomainMessageV1",
    data: BytesLike
  ): Result;

  events: {};
}

export interface EchidnaFuzzHashing extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EchidnaFuzzHashingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    echidna_hash_xdomain_msg_0(overrides?: CallOverrides): Promise<[boolean]>;

    echidna_hash_xdomain_msg_1(overrides?: CallOverrides): Promise<[boolean]>;

    echidna_hash_xdomain_msg_high_version(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    testHashCrossDomainMessageHighVersion(
      _version: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testHashCrossDomainMessageV0(
      _nonce: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testHashCrossDomainMessageV1(
      _nonce: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  echidna_hash_xdomain_msg_0(overrides?: CallOverrides): Promise<boolean>;

  echidna_hash_xdomain_msg_1(overrides?: CallOverrides): Promise<boolean>;

  echidna_hash_xdomain_msg_high_version(
    overrides?: CallOverrides
  ): Promise<boolean>;

  testHashCrossDomainMessageHighVersion(
    _version: PromiseOrValue<BigNumberish>,
    _nonce: PromiseOrValue<BigNumberish>,
    _sender: PromiseOrValue<string>,
    _target: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    _gasLimit: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testHashCrossDomainMessageV0(
    _nonce: PromiseOrValue<BigNumberish>,
    _sender: PromiseOrValue<string>,
    _target: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    _gasLimit: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testHashCrossDomainMessageV1(
    _nonce: PromiseOrValue<BigNumberish>,
    _sender: PromiseOrValue<string>,
    _target: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    _gasLimit: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    echidna_hash_xdomain_msg_0(overrides?: CallOverrides): Promise<boolean>;

    echidna_hash_xdomain_msg_1(overrides?: CallOverrides): Promise<boolean>;

    echidna_hash_xdomain_msg_high_version(
      overrides?: CallOverrides
    ): Promise<boolean>;

    testHashCrossDomainMessageHighVersion(
      _version: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    testHashCrossDomainMessageV0(
      _nonce: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    testHashCrossDomainMessageV1(
      _nonce: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    echidna_hash_xdomain_msg_0(overrides?: CallOverrides): Promise<BigNumber>;

    echidna_hash_xdomain_msg_1(overrides?: CallOverrides): Promise<BigNumber>;

    echidna_hash_xdomain_msg_high_version(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testHashCrossDomainMessageHighVersion(
      _version: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testHashCrossDomainMessageV0(
      _nonce: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testHashCrossDomainMessageV1(
      _nonce: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    echidna_hash_xdomain_msg_0(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    echidna_hash_xdomain_msg_1(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    echidna_hash_xdomain_msg_high_version(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testHashCrossDomainMessageHighVersion(
      _version: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testHashCrossDomainMessageV0(
      _nonce: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testHashCrossDomainMessageV1(
      _nonce: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
