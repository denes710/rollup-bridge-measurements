/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface L2CrossDomainMessengerInterface extends utils.Interface {
  functions: {
    "MESSAGE_VERSION()": FunctionFragment;
    "MIN_GAS_CALLDATA_OVERHEAD()": FunctionFragment;
    "MIN_GAS_CONSTANT_OVERHEAD()": FunctionFragment;
    "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR()": FunctionFragment;
    "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR()": FunctionFragment;
    "OTHER_MESSENGER()": FunctionFragment;
    "baseGas(bytes,uint32)": FunctionFragment;
    "failedMessages(bytes32)": FunctionFragment;
    "initialize()": FunctionFragment;
    "l1CrossDomainMessenger()": FunctionFragment;
    "messageNonce()": FunctionFragment;
    "relayMessage(uint256,address,address,uint256,uint256,bytes)": FunctionFragment;
    "sendMessage(address,bytes,uint32)": FunctionFragment;
    "successfulMessages(bytes32)": FunctionFragment;
    "version()": FunctionFragment;
    "xDomainMessageSender()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MESSAGE_VERSION"
      | "MIN_GAS_CALLDATA_OVERHEAD"
      | "MIN_GAS_CONSTANT_OVERHEAD"
      | "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR"
      | "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR"
      | "OTHER_MESSENGER"
      | "baseGas"
      | "failedMessages"
      | "initialize"
      | "l1CrossDomainMessenger"
      | "messageNonce"
      | "relayMessage"
      | "sendMessage"
      | "successfulMessages"
      | "version"
      | "xDomainMessageSender"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MESSAGE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_GAS_CALLDATA_OVERHEAD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_GAS_CONSTANT_OVERHEAD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OTHER_MESSENGER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseGas",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "failedMessages",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l1CrossDomainMessenger",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "messageNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "relayMessage",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessage",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "successfulMessages",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "xDomainMessageSender",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "MESSAGE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_GAS_CALLDATA_OVERHEAD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_GAS_CONSTANT_OVERHEAD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OTHER_MESSENGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseGas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "failedMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "l1CrossDomainMessenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "successfulMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "xDomainMessageSender",
    data: BytesLike
  ): Result;

  events: {
    "FailedRelayedMessage(bytes32)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "RelayedMessage(bytes32)": EventFragment;
    "SentMessage(address,address,bytes,uint256,uint256)": EventFragment;
    "SentMessageExtension1(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FailedRelayedMessage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayedMessage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SentMessage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SentMessageExtension1"): EventFragment;
}

export interface FailedRelayedMessageEventObject {
  msgHash: string;
}
export type FailedRelayedMessageEvent = TypedEvent<
  [string],
  FailedRelayedMessageEventObject
>;

export type FailedRelayedMessageEventFilter =
  TypedEventFilter<FailedRelayedMessageEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface RelayedMessageEventObject {
  msgHash: string;
}
export type RelayedMessageEvent = TypedEvent<
  [string],
  RelayedMessageEventObject
>;

export type RelayedMessageEventFilter = TypedEventFilter<RelayedMessageEvent>;

export interface SentMessageEventObject {
  target: string;
  sender: string;
  message: string;
  messageNonce: BigNumber;
  gasLimit: BigNumber;
}
export type SentMessageEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  SentMessageEventObject
>;

export type SentMessageEventFilter = TypedEventFilter<SentMessageEvent>;

export interface SentMessageExtension1EventObject {
  sender: string;
  value: BigNumber;
}
export type SentMessageExtension1Event = TypedEvent<
  [string, BigNumber],
  SentMessageExtension1EventObject
>;

export type SentMessageExtension1EventFilter =
  TypedEventFilter<SentMessageExtension1Event>;

export interface L2CrossDomainMessenger extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: L2CrossDomainMessengerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MESSAGE_VERSION(overrides?: CallOverrides): Promise<[number]>;

    MIN_GAS_CALLDATA_OVERHEAD(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_GAS_CONSTANT_OVERHEAD(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    OTHER_MESSENGER(overrides?: CallOverrides): Promise<[string]>;

    baseGas(
      _message: PromiseOrValue<BytesLike>,
      _minGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    failedMessages(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    l1CrossDomainMessenger(overrides?: CallOverrides): Promise<[string]>;

    messageNonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    relayMessage(
      _nonce: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _minGasLimit: PromiseOrValue<BigNumberish>,
      _message: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendMessage(
      _target: PromiseOrValue<string>,
      _message: PromiseOrValue<BytesLike>,
      _minGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    successfulMessages(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    version(overrides?: CallOverrides): Promise<[string]>;

    xDomainMessageSender(overrides?: CallOverrides): Promise<[string]>;
  };

  MESSAGE_VERSION(overrides?: CallOverrides): Promise<number>;

  MIN_GAS_CALLDATA_OVERHEAD(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_GAS_CONSTANT_OVERHEAD(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  OTHER_MESSENGER(overrides?: CallOverrides): Promise<string>;

  baseGas(
    _message: PromiseOrValue<BytesLike>,
    _minGasLimit: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  failedMessages(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  l1CrossDomainMessenger(overrides?: CallOverrides): Promise<string>;

  messageNonce(overrides?: CallOverrides): Promise<BigNumber>;

  relayMessage(
    _nonce: PromiseOrValue<BigNumberish>,
    _sender: PromiseOrValue<string>,
    _target: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    _minGasLimit: PromiseOrValue<BigNumberish>,
    _message: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendMessage(
    _target: PromiseOrValue<string>,
    _message: PromiseOrValue<BytesLike>,
    _minGasLimit: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  successfulMessages(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  version(overrides?: CallOverrides): Promise<string>;

  xDomainMessageSender(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    MESSAGE_VERSION(overrides?: CallOverrides): Promise<number>;

    MIN_GAS_CALLDATA_OVERHEAD(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_GAS_CONSTANT_OVERHEAD(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    OTHER_MESSENGER(overrides?: CallOverrides): Promise<string>;

    baseGas(
      _message: PromiseOrValue<BytesLike>,
      _minGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    failedMessages(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(overrides?: CallOverrides): Promise<void>;

    l1CrossDomainMessenger(overrides?: CallOverrides): Promise<string>;

    messageNonce(overrides?: CallOverrides): Promise<BigNumber>;

    relayMessage(
      _nonce: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _minGasLimit: PromiseOrValue<BigNumberish>,
      _message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    sendMessage(
      _target: PromiseOrValue<string>,
      _message: PromiseOrValue<BytesLike>,
      _minGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    successfulMessages(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    version(overrides?: CallOverrides): Promise<string>;

    xDomainMessageSender(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "FailedRelayedMessage(bytes32)"(
      msgHash?: PromiseOrValue<BytesLike> | null
    ): FailedRelayedMessageEventFilter;
    FailedRelayedMessage(
      msgHash?: PromiseOrValue<BytesLike> | null
    ): FailedRelayedMessageEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "RelayedMessage(bytes32)"(
      msgHash?: PromiseOrValue<BytesLike> | null
    ): RelayedMessageEventFilter;
    RelayedMessage(
      msgHash?: PromiseOrValue<BytesLike> | null
    ): RelayedMessageEventFilter;

    "SentMessage(address,address,bytes,uint256,uint256)"(
      target?: PromiseOrValue<string> | null,
      sender?: null,
      message?: null,
      messageNonce?: null,
      gasLimit?: null
    ): SentMessageEventFilter;
    SentMessage(
      target?: PromiseOrValue<string> | null,
      sender?: null,
      message?: null,
      messageNonce?: null,
      gasLimit?: null
    ): SentMessageEventFilter;

    "SentMessageExtension1(address,uint256)"(
      sender?: PromiseOrValue<string> | null,
      value?: null
    ): SentMessageExtension1EventFilter;
    SentMessageExtension1(
      sender?: PromiseOrValue<string> | null,
      value?: null
    ): SentMessageExtension1EventFilter;
  };

  estimateGas: {
    MESSAGE_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_GAS_CALLDATA_OVERHEAD(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_GAS_CONSTANT_OVERHEAD(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    OTHER_MESSENGER(overrides?: CallOverrides): Promise<BigNumber>;

    baseGas(
      _message: PromiseOrValue<BytesLike>,
      _minGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    failedMessages(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    l1CrossDomainMessenger(overrides?: CallOverrides): Promise<BigNumber>;

    messageNonce(overrides?: CallOverrides): Promise<BigNumber>;

    relayMessage(
      _nonce: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _minGasLimit: PromiseOrValue<BigNumberish>,
      _message: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendMessage(
      _target: PromiseOrValue<string>,
      _message: PromiseOrValue<BytesLike>,
      _minGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    successfulMessages(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    xDomainMessageSender(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MESSAGE_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_GAS_CALLDATA_OVERHEAD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_GAS_CONSTANT_OVERHEAD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_GAS_DYNAMIC_OVERHEAD_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_GAS_DYNAMIC_OVERHEAD_NUMERATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    OTHER_MESSENGER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseGas(
      _message: PromiseOrValue<BytesLike>,
      _minGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    failedMessages(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    l1CrossDomainMessenger(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    messageNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    relayMessage(
      _nonce: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _minGasLimit: PromiseOrValue<BigNumberish>,
      _message: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendMessage(
      _target: PromiseOrValue<string>,
      _message: PromiseOrValue<BytesLike>,
      _minGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    successfulMessages(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    xDomainMessageSender(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
