/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  EchidnaFuzzAddressAliasing,
  EchidnaFuzzAddressAliasingInterface,
} from "../../../../contracts/echidna/FuzzAddressAliasing.sol/EchidnaFuzzAddressAliasing";

const _abi = [
  {
    inputs: [],
    name: "echidna_round_trip_aliasing",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "testRoundTrip",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060aa8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c8063206a6a72146037578063cfae1588146052575b600080fd5b60005460ff1615604051901515815260200160405180910390f35b6060605d3660046062565b50565b005b600060208284031215607357600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114609657600080fd5b939250505056fea164736f6c634300080f000a";

type EchidnaFuzzAddressAliasingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EchidnaFuzzAddressAliasingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EchidnaFuzzAddressAliasing__factory extends ContractFactory {
  constructor(...args: EchidnaFuzzAddressAliasingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<EchidnaFuzzAddressAliasing> {
    return super.deploy(overrides || {}) as Promise<EchidnaFuzzAddressAliasing>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): EchidnaFuzzAddressAliasing {
    return super.attach(address) as EchidnaFuzzAddressAliasing;
  }
  override connect(signer: Signer): EchidnaFuzzAddressAliasing__factory {
    return super.connect(signer) as EchidnaFuzzAddressAliasing__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EchidnaFuzzAddressAliasingInterface {
    return new utils.Interface(_abi) as EchidnaFuzzAddressAliasingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): EchidnaFuzzAddressAliasing {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as EchidnaFuzzAddressAliasing;
  }
}
