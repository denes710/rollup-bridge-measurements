/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  SafeCaller_Actor,
  SafeCaller_ActorInterface,
} from "../../../../../contracts/test/invariants/SafeCall.t.sol/SafeCaller_Actor";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract Vm",
        name: "_vm",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_fails",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "numCalls",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "gas",
        type: "uint64",
      },
      {
        internalType: "uint64",
        name: "minGas",
        type: "uint64",
      },
    ],
    name: "performSafeCallMinGas",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610a03380380610a0383398101604081905261002f9161005a565b600080546001600160a01b0319166001600160a01b03939093169290921790915515156080526100a5565b6000806040838503121561006d57600080fd5b82516001600160a01b038116811461008457600080fd5b6020840151909250801515811461009a57600080fd5b809150509250929050565b6080516109366100cd60003960008181606d015281816102a601526102e301526109366000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806382f161ca1461003b578063e90fb80b14610056575b600080fd5b61004460015481565b60405190815260200160405180910390f35b6100696100643660046106f5565b61006b565b005b7f0000000000000000000000000000000000000000000000000000000000000000156100fa576100ae67ffffffffffffffff82166109c465ffffffffffff61032d565b90506100f367ffffffffffffffff808416908316603f6100cf8560c8610757565b6100da906040610783565b6100e491906107e2565b67ffffffffffffffff1661032d565b9150610172565b61011767ffffffffffffffff82166109c465ffffffffffff61032d565b905061016f67ffffffffffffffff8316603f6101348460c8610757565b61013f906040610783565b61014991906107e2565b610155906101f4610757565b67ffffffffffffffff1667ffffffffffffffff801661032d565b91505b600080546040517f08e4e116000000000000000000000000000000000000000000000000000000008152600481018390526024810183905267ffffffffffffffff8416604482015260806064820152608481019290925273ffffffffffffffffffffffffffffffffffffffff16906308e4e1169060a401600060405180830381600087803b15801561020357600080fd5b505af1158015610217573d6000803e3d6000fd5b50505050600061029a338467ffffffffffffffff166000632ae57a4186604051602401610254919067ffffffffffffffff91909116815260200190565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610382565b90508080156102c657507f00000000000000000000000000000000000000000000000000000000000000005b156102e157600180549060006102db83610809565b91905055505b7f000000000000000000000000000000000000000000000000000000000000000015801561030d575080155b15610328576001805490600061032283610809565b91905055505b505050565b600061033a84848461039c565b905061037b6040518060400160405280600c81526020017f426f756e6420526573756c740000000000000000000000000000000000000000815250826105d8565b9392505050565b600080600080845160208601878a8af19695505050505050565b600081831115610432576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603e60248201527f5374645574696c7320626f756e642875696e743235362c75696e743235362c7560448201527f696e74323536293a204d6178206973206c657373207468616e206d696e2e0000606482015260840160405180910390fd5b8284101580156104425750818411155b1561044e57508261037b565b600061045a8484610841565b610465906001610858565b90506003851115801561047757508481115b1561048e576104868585610858565b91505061037b565b6104b960037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610841565b85101580156104f057506104ed857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610841565b81115b156105295761051f857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610841565b6104869084610841565b8285111561057f57600061053d8487610841565b9050600061054b8383610870565b9050806000036105605784935050505061037b565b600161056c8288610858565b6105769190610841565b935050506105d0565b838510156105d05760006105938686610841565b905060006105a18383610870565b9050806000036105b65785935050505061037b565b6105c08186610841565b6105cb906001610858565b935050505b509392505050565b60006a636f6e736f6c652e6c6f6773ffffffffffffffffffffffffffffffffffffffff16838360405160240161060f9291906108b4565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fb60e72cc0000000000000000000000000000000000000000000000000000000017905251610690919061090d565b600060405180830381855afa9150503d80600081146106cb576040519150601f19603f3d011682016040523d82523d6000602084013e6106d0565b606091505b505050505050565b803567ffffffffffffffff811681146106f057600080fd5b919050565b6000806040838503121561070857600080fd5b610711836106d8565b915061071f602084016106d8565b90509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600067ffffffffffffffff80831681851680830382111561077a5761077a610728565b01949350505050565b600067ffffffffffffffff808316818516818304811182151516156107aa576107aa610728565b02949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600067ffffffffffffffff808416806107fd576107fd6107b3565b92169190910492915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361083a5761083a610728565b5060010190565b60008282101561085357610853610728565b500390565b6000821982111561086b5761086b610728565b500190565b60008261087f5761087f6107b3565b500690565b60005b8381101561089f578181015183820152602001610887565b838111156108ae576000848401525b50505050565b60408152600083518060408401526108d3816060850160208801610884565b602083019390935250601f919091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01601606001919050565b6000825161091f818460208701610884565b919091019291505056fea164736f6c634300080f000a";

type SafeCaller_ActorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SafeCaller_ActorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SafeCaller_Actor__factory extends ContractFactory {
  constructor(...args: SafeCaller_ActorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _vm: PromiseOrValue<string>,
    _fails: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SafeCaller_Actor> {
    return super.deploy(
      _vm,
      _fails,
      overrides || {}
    ) as Promise<SafeCaller_Actor>;
  }
  override getDeployTransaction(
    _vm: PromiseOrValue<string>,
    _fails: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_vm, _fails, overrides || {});
  }
  override attach(address: string): SafeCaller_Actor {
    return super.attach(address) as SafeCaller_Actor;
  }
  override connect(signer: Signer): SafeCaller_Actor__factory {
    return super.connect(signer) as SafeCaller_Actor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SafeCaller_ActorInterface {
    return new utils.Interface(_abi) as SafeCaller_ActorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SafeCaller_Actor {
    return new Contract(address, _abi, signerOrProvider) as SafeCaller_Actor;
  }
}
