/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  SimpleImplementation,
  SimpleImplementationInterface,
} from "../../../../contracts/test/ResolvedDelegateProxy.t.sol/SimpleImplementation";

const _abi = [
  {
    inputs: [],
    name: "bar",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_x",
        type: "uint256",
      },
    ],
    name: "foo",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060ea8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80632fbebd38146037578063febb0f7e146057575b600080fd5b6045604236600460c5565b90565b60405190815260200160405180910390f35b605d605f565b005b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f53696d706c65496d706c656d656e746174696f6e3a2072657665727400000000604482015260640160405180910390fd5b60006020828403121560d657600080fd5b503591905056fea164736f6c634300080f000a";

type SimpleImplementationConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SimpleImplementationConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SimpleImplementation__factory extends ContractFactory {
  constructor(...args: SimpleImplementationConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SimpleImplementation> {
    return super.deploy(overrides || {}) as Promise<SimpleImplementation>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SimpleImplementation {
    return super.attach(address) as SimpleImplementation;
  }
  override connect(signer: Signer): SimpleImplementation__factory {
    return super.connect(signer) as SimpleImplementation__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SimpleImplementationInterface {
    return new utils.Interface(_abi) as SimpleImplementationInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SimpleImplementation {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as SimpleImplementation;
  }
}
