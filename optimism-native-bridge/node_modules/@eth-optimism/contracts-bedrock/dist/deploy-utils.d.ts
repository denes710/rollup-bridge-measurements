import { ethers, Contract } from 'ethers';
import { Provider } from '@ethersproject/abstract-provider';
import { Signer } from '@ethersproject/abstract-signer';
import { HardhatRuntimeEnvironment } from 'hardhat/types';
import 'hardhat-deploy';
import '@eth-optimism/hardhat-deploy-config';
import '@nomiclabs/hardhat-ethers';
export declare const deploy: ({ hre, name, iface, args, contract, postDeployAction, }: {
    hre: HardhatRuntimeEnvironment;
    name: string;
    args: any[];
    contract?: string;
    iface?: string;
    postDeployAction?: (contract: Contract) => Promise<void>;
}) => Promise<ethers.Contract>;
export declare const asAdvancedContract: (opts: {
    contract: Contract;
    confirmations?: number;
    gasPrice?: number;
}) => Contract;
export declare const getContractFromArtifact: (hre: HardhatRuntimeEnvironment, name: string, opts?: {
    iface?: string;
    signerOrProvider?: Signer | Provider | string;
}) => Promise<ethers.Contract>;
export declare const getContractsFromArtifacts: (hre: HardhatRuntimeEnvironment, configs: Array<{
    name: string;
    iface?: string;
    signerOrProvider?: Signer | Provider | string;
}>) => Promise<ethers.Contract[]>;
export declare const assertContractVariable: (contract: ethers.Contract, variable: string, expected: any) => Promise<void>;
export declare const getDeploymentAddress: (hre: HardhatRuntimeEnvironment, name: string) => Promise<string>;
export declare const jsonifyTransaction: (tx: ethers.PopulatedTransaction) => string;
export declare const isStep: (dictator: ethers.Contract, step: number) => Promise<boolean>;
export declare const doStep: (opts: {
    isLiveDeployer?: boolean;
    SystemDictator: ethers.Contract;
    step: number;
    message: string;
    checks: () => Promise<void>;
}) => Promise<void>;
export declare const getTenderlySimulationLink: (provider: ethers.providers.Provider, tx: ethers.PopulatedTransaction) => Promise<string>;
export declare const getCastCommand: (tx: ethers.PopulatedTransaction) => string;
